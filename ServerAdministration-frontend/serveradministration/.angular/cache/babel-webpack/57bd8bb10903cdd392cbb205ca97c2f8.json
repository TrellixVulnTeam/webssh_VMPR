{"ast":null,"code":"import { timer } from 'rxjs';\nimport { Terminal } from 'xterm';\nimport { WebsocketService } from '../services/websockets/websocket.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/websockets/websocket.service\";\nimport * as i2 from \"../services/rest-api/restapi.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"terminal\"];\n\nfunction TerminalComponent_div_2_ul_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵelementStart(1, \"li\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TerminalComponent_div_2_ul_1_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const server_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.open(server_r4.serverId);\n    });\n    i0.ɵɵtext(4, \"Terminal!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const server_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Name: \", server_r4.serverName, \" \");\n  }\n}\n\nfunction TerminalComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TerminalComponent_div_2_ul_1_Template, 5, 1, \"ul\", 5);\n    i0.ɵɵelementStart(2, \"input\", 6);\n    i0.ɵɵlistener(\"ngModelChange\", function TerminalComponent_div_2_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.server.masterPassword = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.user == null ? null : ctx_r0.user.servers);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.server.masterPassword);\n  }\n}\n\nfunction TerminalComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function TerminalComponent_div_6_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.close();\n    });\n    i0.ɵɵtext(2, \"End session\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let TerminalComponent = /*#__PURE__*/(() => {\n  class TerminalComponent {\n    constructor(websocket, service) {\n      this.websocket = websocket;\n      this.service = service;\n      this.closeClient = null;\n      this.server = {\n        serverId: '',\n        masterPassword: ''\n      };\n      this.service.getUserDetails().subscribe(data => {\n        sessionStorage.username = data.username;\n      });\n    }\n\n    ngOnInit() {\n      const response = this.service.getUserDetails();\n      response.subscribe(data => {\n        this.user = data;\n      });\n    }\n\n    open(serverId) {\n      this.server.serverId = serverId;\n      this.openTerminal(this.server);\n    }\n\n    close() {\n      this.closeClient.close();\n    }\n\n    connected() {\n      if (this.closeClient !== null) {\n        return false;\n      }\n\n      return true;\n    }\n\n    openTerminal(server) {\n      const client = new WebsocketService();\n      const term = new Terminal();\n      this.closeClient = client;\n      term.onData(function (data) {\n        client.sendClientData(data);\n      });\n      term.open(this.terminalDiv.nativeElement);\n      term.write('Connecting...\\n\\r');\n      client.connect({\n        onerror(error) {\n          term.write('Error: ' + error + ' \\r\\n');\n        },\n\n        onopen() {\n          client.sendInitData(server);\n        },\n\n        onclose() {\n          term.write('Connection closed.\\n\\r');\n          term.clear();\n          term.write('\\n\\n\\r- - - - - - - - - - - - - - - - -\\n\\n\\r        Reloading page...\\n\\n\\r- - - - - - - - - - - - - - - - -');\n          timer(2000).subscribe(x => {\n            window.location.reload();\n          });\n        },\n\n        onmessage(data) {\n          term.write(data);\n        }\n\n      });\n    }\n\n  }\n\n  TerminalComponent.ɵfac = function TerminalComponent_Factory(t) {\n    return new (t || TerminalComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService), i0.ɵɵdirectiveInject(i2.RestapiService));\n  };\n\n  TerminalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TerminalComponent,\n    selectors: [[\"app-terminal\"]],\n    viewQuery: function TerminalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.terminalDiv = _t.first);\n      }\n    },\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"term\"], [4, \"ngIf\"], [1, \"center\"], [\"terminal\", \"\"], [\"class\", \"closebutton\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"password\", \"id\", \"masterPassword\", \"name\", \"masterPassword\", \"placeholder\", \"Master password\", \"required\", \"\", 1, \"input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"button\", 3, \"click\"], [1, \"closebutton\"], [3, \"click\"]],\n    template: function TerminalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"br\");\n        i0.ɵɵtemplate(2, TerminalComponent_div_2_Template, 3, 2, \"div\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelement(4, \"div\", null, 3);\n        i0.ɵɵtemplate(6, TerminalComponent_div_6_Template, 3, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.connected());\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.closeClient !== null);\n      }\n    },\n    directives: [i3.NgIf, i3.NgForOf, i4.DefaultValueAccessor, i4.RequiredValidator, i4.NgControlStatus, i4.NgModel],\n    styles: [\"/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\\n * https://github.com/chjj/term.js\\n * @license MIT\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n * THE SOFTWARE.\\n *\\n * Originally forked from (with the author's permission):\\n *   Fabrice Bellard's javascript vt100 for jslinux:\\n *   http://bellard.org/jslinux/\\n *   Copyright (c) 2011 Fabrice Bellard\\n *   The original design remains. The terminal itself\\n *   has been extended to include xterm CSI codes, among\\n *   other features.\\n */.xterm{position:relative;user-select:none;-ms-user-select:none;-webkit-user-select:none}.xterm.focus,.xterm:focus{outline:none}.xterm .xterm-helpers{position:absolute;top:0;z-index:5}.xterm .xterm-helper-textarea{padding:0;border:0;margin:0;position:absolute;opacity:0;left:-9999em;top:0;width:0;height:0;z-index:-5;white-space:nowrap;overflow:hidden;resize:none}.xterm .composition-view{background:#000;color:#fff;display:none;position:absolute;white-space:nowrap;z-index:1}.xterm .composition-view.active{display:block}.xterm .xterm-viewport{background-color:#000;overflow-y:scroll;cursor:default;position:absolute;right:0;left:0;top:0;bottom:0}.xterm .xterm-screen{position:relative}.xterm .xterm-screen canvas{position:absolute;left:0;top:0}.xterm .xterm-scroll-area{visibility:hidden}.xterm-char-measure-element{display:inline-block;visibility:hidden;position:absolute;top:0;left:-9999em;line-height:normal}.xterm{cursor:text}.xterm.enable-mouse-events{cursor:default}.xterm.xterm-cursor-pointer{cursor:pointer}.xterm.column-select.focus{cursor:crosshair}.xterm .xterm-accessibility,.xterm .xterm-message{position:absolute;left:0;top:0;bottom:0;right:0;z-index:10;color:transparent}.xterm .live-region{position:absolute;left:-9999px;width:1px;height:1px;overflow:hidden}.xterm-dim{opacity:.5}.xterm-underline{text-decoration:underline}.xterm-strikethrough{text-decoration:line-through}.term{position:absolute;background-color:#212121;border:3px solid #212121;border-radius:10%;width:245px;height:110px;left:43.5%;right:43.5%;padding:20px;top:30%;text-align:center}.button{border-radius:30px;border:0;padding:2px;width:40%;margin-top:14px;font-family:\\\"Orbitron\\\",sans-serif;cursor:pointer}.input{width:50%;border:white solid 5px;margin-top:2%;margin-bottom:4%;text-align:center;border-radius:20px}.center{position:absolute;top:35%;left:35%;margin-top:-50px;margin-left:-50px;width:100px;height:100px;text-align:center}.closebutton{border-radius:30px;border:0;padding:2px;width:70%;margin-top:14px;font-family:\\\"Orbitron\\\",sans-serif;cursor:pointer}\\n\"],\n    encapsulation: 2\n  });\n  return TerminalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}